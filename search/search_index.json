{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AgentServe","text":"<p>AgentServe is a FastAPI-based server for deploying and serving OpenAI agents. It provides a simple way to expose your agents through a REST API with both synchronous and streaming endpoints.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>\ud83d\ude80 Easy deployment of OpenAI agents</li> <li>\ud83d\udd04 Support for both synchronous and streaming responses</li> <li>\ud83d\udcda Automatic API documentation with Swagger UI</li> <li>\ud83d\udd0d Health check and agent info endpoints</li> <li>\u26a1 Built on FastAPI for high performance</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code># Install the package\npip install openai-agentserve\n\n# Create a basic agent server\nfrom agentserve import serve\nfrom agents import Agent  # Your agent implementation\n\n# Create your agent\nagent = Agent(name=\"MyAgent\")\n\n# Start the server\nserve(agent, host=\"0.0.0.0\", port=8000)\n</code></pre> <p>Visit <code>http://localhost:8000/docs</code> to see the interactive API documentation.</p>"},{"location":"#installation","title":"Installation","text":"<p>You can install AgentServe using pip:</p> <pre><code>pip install openai-agentserve\n</code></pre> <p>Or using poetry:</p> <pre><code>poetry add openai-agentserve\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<p>The main function you'll use is <code>serve()</code>, which creates and starts a FastAPI application:</p> <p>```python from agentserve import serve from agents import Agent</p> <p>def create_app():     # Create your agent     agent = Agent(name=\"MyAgent\")</p> <pre><code># Create the FastAPI app without starting the server\napp = serve(agent, run_server=False)\nreturn app\n</code></pre>"},{"location":"#or-start-the-server-directly","title":"Or start the server directly","text":"<p>if name == \"main\":     agent = Agent(name=\"MyAgent\")     serve(agent, host=\"0.0.0.0\", port=8000) </p>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#endpoints","title":"Endpoints","text":""},{"location":"api/#health-check","title":"Health Check","text":"<pre><code>GET /health\n</code></pre> <p>Returns the health status of the server.</p> <p>Response</p> <pre><code>{\n    \"status\": \"ok\"\n}\n</code></pre>"},{"location":"api/#agent-info","title":"Agent Info","text":"<pre><code>GET /agent/info\n</code></pre> <p>Returns information about the deployed agent.</p> <p>Response</p> <pre><code>{\n    \"name\": \"string\",\n    \"description\": \"string\",\n    \"capabilities\": [\"string\"],\n    \"version\": \"string\"\n}\n</code></pre>"},{"location":"api/#synchronous-invoke","title":"Synchronous Invoke","text":"<pre><code>POST /agent/invoke\n</code></pre> <p>Invokes the agent synchronously and returns the complete response.</p> <p>Request Body</p> <pre><code>{\n    \"question\": \"string\",\n    \"context\": \"string\",  // Optional\n    \"stream\": false       // Must be false for sync requests\n}\n</code></pre> <p>Response</p> <pre><code>{\n    \"answer\": \"string\",\n    \"metadata\": {\n        \"key\": \"value\"\n    }\n}\n</code></pre>"},{"location":"api/#streaming-invoke","title":"Streaming Invoke","text":"<pre><code>POST /agent/invoke\n</code></pre> <p>Invokes the agent and streams the response as it's generated.</p> <p>Request Body</p> <pre><code>{\n    \"question\": \"string\",\n    \"context\": \"string\",  // Optional\n    \"stream\": true        // Must be true for streaming\n}\n</code></pre> <p>Response</p> <p>Server-Sent Events (SSE) stream with JSON objects:</p> <pre><code>{\n    \"content\": \"string\",\n    \"metadata\": {\n        \"key\": \"value\"\n    },\n    \"done\": false\n}\n</code></pre> <p>The final event will have <code>\"done\": true</code>.</p>"},{"location":"api/#error-responses","title":"Error Responses","text":"<p>All endpoints may return the following error responses:</p>"},{"location":"api/#400-bad-request","title":"400 Bad Request","text":"<pre><code>{\n    \"detail\": \"Invalid request parameters\"\n}\n</code></pre>"},{"location":"api/#500-internal-server-error","title":"500 Internal Server Error","text":"<pre><code>{\n    \"detail\": \"Internal server error occurred\"\n}\n</code></pre>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#basic-example","title":"Basic Example","text":"<p>Here's a basic example of creating and serving an agent:</p> <pre><code>from agentserve import serve\nfrom agents import Agent\n\n# Create a simple agent\nagent = Agent(\n    name=\"EchoAgent\",\n    description=\"A simple agent that echoes back the input\",\n    capabilities=[\"echo\"]\n)\n\n# Start the server\nserve(agent, host=\"0.0.0.0\", port=8000)\n</code></pre>"},{"location":"examples/#using-with-fastapi","title":"Using with FastAPI","text":"<p>You can integrate AgentServe with an existing FastAPI application:</p> <pre><code>from fastapi import FastAPI\nfrom agentserve import serve\nfrom agents import Agent\n\n# Create your FastAPI app\napp = FastAPI()\n\n# Add some custom routes\n@app.get(\"/custom\")\nasync def custom_endpoint():\n    return {\"message\": \"Custom endpoint\"}\n\n# Create your agent\nagent = Agent(name=\"MyAgent\")\n\n# Add AgentServe routes to your app\nserve(agent, app=app, run_server=False)\n\n# Start the server using uvicorn\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n</code></pre>"},{"location":"examples/#making-requests","title":"Making Requests","text":""},{"location":"examples/#synchronous-request","title":"Synchronous Request","text":"<p>Using Python requests:</p> <pre><code>import requests\n\nresponse = requests.post(\n    \"http://localhost:8000/agent/invoke\",\n    json={\n        \"question\": \"What is 2+2?\",\n        \"stream\": False\n    }\n)\nprint(response.json())\n</code></pre> <p>Using curl:</p> <pre><code>curl -X POST http://localhost:8000/agent/invoke \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\"question\": \"What is 2+2?\", \"stream\": false}'\n</code></pre>"},{"location":"examples/#streaming-request","title":"Streaming Request","text":"<p>Using Python requests:</p> <pre><code>import requests\n\nresponse = requests.post(\n    \"http://localhost:8000/agent/invoke\",\n    json={\n        \"question\": \"Tell me a story\",\n        \"stream\": True\n    },\n    stream=True\n)\n\nfor line in response.iter_lines():\n    if line:\n        print(line.decode())\n</code></pre> <p>Using curl:</p> <pre><code>curl -X POST http://localhost:8000/agent/invoke \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Accept: text/event-stream\" \\\n    -d '{\"question\": \"Tell me a story\", \"stream\": true}'\n</code></pre>"},{"location":"examples/#advanced-configuration","title":"Advanced Configuration","text":"<p>You can customize the server behavior with additional parameters:</p> <pre><code>from agentserve import serve\nfrom agents import Agent\n\nagent = Agent(name=\"MyAgent\")\n\nserve(\n    agent,\n    host=\"0.0.0.0\",\n    port=8000,\n    workers=4,              # Number of worker processes\n    log_level=\"debug\",      # Logging level\n    cors_origins=[\"*\"],     # CORS origins\n    timeout=30,             # Request timeout in seconds\n)\n</code></pre>"}]}